[{"/Users/ishaq.amin/Desktop/reactTutorials/components/src/index.js":"1","/Users/ishaq.amin/Desktop/reactTutorials/components/src/reportWebVitals.js":"2","/Users/ishaq.amin/Desktop/reactTutorials/components/src/App.js":"3","/Users/ishaq.amin/Desktop/reactTutorials/components/src/components/counter.jsx":"4"},{"size":591,"mtime":1611045868340,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1611045249227,"results":"7","hashOfConfig":"6"},{"size":528,"mtime":1611045249226,"results":"8","hashOfConfig":"6"},{"size":1913,"mtime":1611045363773,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1kfpxu3",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},"/Users/ishaq.amin/Desktop/reactTutorials/components/src/index.js",["20"],"/Users/ishaq.amin/Desktop/reactTutorials/components/src/reportWebVitals.js",[],["21","22"],"/Users/ishaq.amin/Desktop/reactTutorials/components/src/App.js",[],"/Users/ishaq.amin/Desktop/reactTutorials/components/src/components/counter.jsx",["23"],"import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  state = {\n    count: 1,\n    tags: [\"tag1\", \"tag2\", \"tag3\"],\n  };\n\n  renderTags() {\n    if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n\n    return (\n      <ul>\n        {\" \"}\n        {this.state.tags.map(tag => (\n          <li key={tag}> {tag} </li>\n        ))}{\" \"}\n      </ul>\n    );\n    // Gives a key value to each element in the array. React needs to be able to access each element.\n  }\n\n  constructor() {\n    super();\n    this.handleIncrement = this.handleIncrement.bind(this);\n    // handIncrement method needs to be binded to allow for 'this' keyword to have access to it globally.\n    //  You can also use the arrow function to bypass the super and binding methods.\n  }\n  //   handleIncrement() {}\n  handleIncrement = () => {\n    this.setState({ count: (this.state.count += 1) });\n    // In React you need to set the state to update the view(UI). You cannot do it direct i.e this.state.count += 1 as a direct method.\n  };\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n  formatCount() {\n    return this.state.count === 0 ? \"zero\" : this.state.count;\n  }\n\n  render() {\n    return (\n      <div>\n        {/* {this.state.tags.length === 0 && \"Please create new tags\"}\n                {/* Render a conditional statement in line - A populated string in JS is considered truthy, so both values are true */}\n\n        <span\n          style={{ fontWeight: \"bold\", fontSize: 15 }}\n          className={this.getBadgeClasses()}\n        >\n          {this.formatCount()}\n        </span>\n\n        <button\n          onClick={this.handleIncrement}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n\n        {this.renderTags()}\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n",{"ruleId":"24","severity":1,"message":"25","line":4,"column":8,"nodeType":"26","messageId":"27","endLine":4,"endColumn":11},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":31,"column":29,"nodeType":"34","endLine":31,"endColumn":39},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["35"],"no-negated-in-lhs",["36"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-global-assign","no-unsafe-negation"]